---
import Layout from "../layouts/LayoutSimple.astro";
import SimpleIntro from "../components/simplePageComponents/SimpleIntro.astro";
import SimpleProjects from "../components/simplePageComponents/SimpleProjects.astro";
import SimpleContact from "../components/simplePageComponents/SimpleContact.astro";
import PageCard from "../components/Card/PageCard.astro";
import GlitchText from "../components/GlitchText/GlitchText.astro";
import CutCard from "../components/Card/CutCard/CutCard.astro";
import "./base.css";
export interface Props {
    sphereDim: string;
}

const sphereDim = 150;
const sphereDimPx = `${sphereDim}px`;
---

<Layout title="simple portfolio">
    <main class="relative text-stone-200 overflow-hidden h-screen w-screen">
        <div class="fixed flex items-center justify-center w-screen z-[9999]">
            <nav
                class="flex items-center w-screen justify-between m-auto mt-5 lg:mx-14 mx-2 contained"
            >
                <button
                    class="btn btn-outline btn-primary cursor-pointer"
                    id="preview-cv">Preview CV</button
                >
                <ul class="flex items-center justify-center [&>li]:mr-3">
                    <li
                        class="hover:border-b-orange-300 hover:border-b-2 cursor-pointer"
                    >
                        About
                    </li>
                    <li
                        class="hover:border-b-orange-300 hover:border-b-2 cursor-pointer"
                    >
                        Projects
                    </li>
                    <li
                        class="hover:border-b-orange-300 hover:border-b-2 cursor-pointer"
                    >
                        Contact
                    </li>
                </ul>
            </nav>
        </div>
        <div
            id="sphere"
            class="sphere rounded-[50%] absolute sphere-initial z-10 mix-blend-difference"
        >
        </div>
        <GlitchText textToShow={"SCROLL"} class="z-20" />

        <CutCard
            class="about absolute z-[100] translate-x-[200vw] bg-black"
            id="aboutCard"
        >
            <SimpleIntro />
        </CutCard>

        <CutCard
            id="projectsCard"
            class="projects absolute z-[90] translate-x-[200vw] bg-black"
        >
            <SimpleProjects />
        </CutCard>

        <CutCard
            id="contactCard"
            class="projects absolute z-[80] translate-x-[200vw] bg-black"
        >
            <SimpleContact />
        </CutCard>
    </main>
</Layout>

<style is:global>
    h2.page-title {
        text-transform: uppercase;
        font-weight: 500;
        font-size: 3.125rem;
    }
</style>

<style define:vars={{ sphereDim: sphereDim, sphereDimPx: sphereDimPx }}>
    .sphere-about {
        transform: translateY(calc(45vh - var(--sphereDimPx) / 2));
        margin-left: 50px;
    }

    .sphere-projects {
        transform: translateY(2.5rem)
            translateX(calc(50vw - var(--sphereDimPx) / 2 - 90px))
            rotate(425deg);
    }

    .sphere-contact {
        transform: translateY(calc(50vh - var(--sphereDimPx) / 2 + 20px))
            translateX(calc(100vw - var(--sphereDimPx) / 2 - 110px))
            rotate(950deg);
    }

    .sphere-initial {
        transform: translate(
                calc(50vw - var(--sphereDimPx) / 2),
                calc(50vh - var(--sphereDimPx) / 2)
            )
            scale(
                calc(
                    max(var(--screenHeight), var(--screenWidth)) /
                        (var(--sphereDim))
                )
            )
            rotate(960deg);
    }

    .sphere {
        width: var(--sphereDimPx);
        height: var(--sphereDimPx);
        background: rgb(231, 234, 231);
        border-radius: 50%;
        animation-fill-mode: forwards;
        transition: all 1s;
        position: relative;
    }

    .sphere::after {
        content: "";
        height: var(--sphereDimPx);
        width: 10px;
        background-color: black;
        display: block;
        transform: rotate(45deg);
        position: absolute;
        top: -25px;
        left: 30px;
    }

    .sphere::before {
        content: "";
        height: calc(var(--sphereDimPx) + 20px);
        width: 10px;
        background-color: black;
        display: block;
        transform: rotate(110deg);
        position: absolute;
        top: 40px;
        left: 35px;
    }
</style>

<style>
    @keyframes enterin {
        from {
            transform: translate(200vw, 0);
        }
        to {
            transform: translate(0, 0);
        }
    }

    @keyframes exitout {
        0% {
            transform: translate(0, 0);
        }

        100% {
            transform: translate(-120vw, 0);
        }
    }

    .enter-in {
        animation: enterin 1s;
        animation-fill-mode: forwards;
    }
    .exit-out {
        animation: exitout 1s;
        animation-fill-mode: forwards;
    }
    main {
        background: rgb(0, 0, 0);
        position: relative;
    }

    section {
        height: 100%;
        width: 100%;
        animation-fill-mode: forwards;
    }

    .page-card {
        height: 100%;
        width: 100%;
        border-radius: 50px;
    }

    .card-intro {
        height: full;
        width: full;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: rgba(254, 254, 254, 0.8);
    }

    .card-enter-animation {
    }

    .page-card {
        transition: translate 1s, scale 1s cubic-bezier(1, -0.01, 1, 0.07);
    }

    .page-card-mini {
        scale: 0.1;
    }

    .page-card-big {
        scale: 1;
    }
</style>

<script>
    const sphereIdEl = document.getElementById("sphere");
    const pages: Array<{ name: string; element: HTMLElement }> = [
        { name: "aboutCard", element: document.getElementById("aboutCard")! },
        {
            name: "projectsCard",
            element: document.getElementById("projectsCard")!,
        },
        {
            name: "contactCard",
            element: document.getElementById("contactCard")!,
        },
    ];

    let currentPageIndex = 0;
    const incrementCurrentPageIndex = () => {
        let val = (currentPageIndex + 1) % pages.length;
        currentPageIndex = val;
        return val;
    };

    const decrementCurrentPageIndex = () => {
        if (currentPageIndex <= 0) {
            currentPageIndex = 2;
        } else {
            currentPageIndex--;
        }
        return currentPageIndex;
    };
    const mainElement = document.querySelector("main");

    let timerTimeout: any;
    let switchy = true;
    let performLogic = true;
    let abslastDeltaXY = 0;

    let mainHeaderOver = false;
    const handleElementToShow = (
        newPageToShow: (typeof pages)[0],
        oldPage: (typeof pages)[0]
    ) => {
        const oldPageCardRef = document.getElementById(`${oldPage.name}`);
        const oldPageCardRefCopy = document.getElementById(
            `${oldPage.name}-copy`
        );
        const newPageCardRef = document.getElementById(
            `${newPageToShow.name}`
        )!;

        oldPageCardRef!.classList.add("leave");
        oldPageCardRefCopy!.classList.add("leave");
        // oldPageRef!.classList.remove("enter-in");
        // oldPageRef!.classList.add("exit-out");

        // newPageRef!.classList.remove("exit-out");
        // newPageRef!.classList.add("enter-in");

        const classToRemove = `sphere-${oldPage.name}`;
        const classToAdd = `sphere-${newPageToShow.name}`;

        sphereIdEl!.classList.remove(classToRemove);
        sphereIdEl!.classList.add(classToAdd);
    };

    const transitionToNextSection = (
        direction: number,
        currentPageIndex: number,
        pagesArr: typeof pages
    ) => {
        const oldPageIndex = currentPageIndex;
        let newPageIndex;
        if (direction > 0) {
            newPageIndex = incrementCurrentPageIndex();
            console.log("forwards", newPageIndex);
        } else {
            newPageIndex = decrementCurrentPageIndex();
            console.log("backawrds", newPageIndex);
        }

        const newPageToShow = pagesArr[newPageIndex];
        const oldPage = pagesArr[oldPageIndex];

        handleElementToShow(newPageToShow, oldPage);
    };

    mainElement!.addEventListener("wheel", (ev) => {
        ev.preventDefault(); // stop scrolling
        const absEvVal = Math.abs(ev.deltaY + ev.deltaX);
        if (mainHeaderOver) {
            if (absEvVal > 75) {
                if (absEvVal > abslastDeltaXY) {
                    switchy = true;
                } else if (absEvVal < abslastDeltaXY && switchy) {
                    clearTimeout(timerTimeout);
                    if (performLogic) {
                        console.log("run");
                        transitionToNextSection(
                            ev.deltaY + ev.deltaX,
                            currentPageIndex,
                            pages
                        );
                        performLogic = false;
                    }

                    timerTimeout = setTimeout(() => {
                        switchy = false;
                        performLogic = true;
                    }, 200);
                }
                abslastDeltaXY = Math.abs(ev.deltaY + ev.deltaX);
            }
        } else {
            sphereIdEl!.classList.remove("sphere-initial", "z-10");
            sphereIdEl!.classList.add("sphere-about", "z-[999]");
            document
                .getElementById("aboutCard")!
                .classList.remove("translate-x-[200vw]");
            document
                .getElementById("projectsCard")!
                .classList.remove("translate-x-[200vw]");
            document
                .getElementById("contactCard")!
                .classList.remove("translate-x-[200vw]");
            document
                .getElementById("aboutCard-copy")!
                .classList.remove("translate-x-[200vw]");
            document
                .getElementById("projectsCard-copy")!
                .classList.remove("translate-x-[200vw]");
            document
                .getElementById("contactCard-copy")!
                .classList.remove("translate-x-[200vw]");

            const glitchTextEl = document.querySelector(
                "h1.glitch"
            )! as HTMLElement;

            glitchTextEl.style.opacity = "0";

            //remove glitch effect in 1.5s
            setTimeout(() => {
                mainHeaderOver = true;
                glitchTextEl.classList.remove("glitch");
                glitchTextEl.style.opacity = "1";
            }, 1500);
        }
    });

    const splitCurrentPageToShowNextPage = (
        currentPageRef: HTMLElement,
        nextPageRef: HTMLElement
    ) => {};
</script>
