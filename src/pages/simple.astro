---
import Layout from "../layouts/LayoutSimple.astro";
import SimpleIntro from "../components/simplePageComponents/SimpleIntro.astro";
import SimpleProjects from "../components/simplePageComponents/SimpleProjects.astro";
import SimpleContact from "../components/simplePageComponents/SimpleContact.astro";
import PageCard from "../components/Card/PageCard.astro";
import "./base.css";
export interface Props {
    sphereDim: string;
}

const sphereDim = 150;
const sphereDimPx = `${sphereDim}px`;
---

<Layout title="simple portfolio">
    <main class="relative text-stone-200 overflow-hidden h-screen w-screen">
        <div class="fixed flex items-center justify-center w-screen z-50">
            <nav
                class="flex items-center w-screen justify-between m-auto mt-5 lg:mx-14 mx-2 contained"
            >
                <button
                    class="btn btn-outline btn-primary cursor-pointer"
                    id="preview-cv">Preview CV</button
                >
                <ul class="flex items-center justify-center [&>li]:mr-3">
                    <li
                        class="hover:border-b-orange-300 hover:border-b-2 cursor-pointer"
                    >
                        About
                    </li>
                    <li
                        class="hover:border-b-orange-300 hover:border-b-2 cursor-pointer"
                    >
                        Projects
                    </li>
                    <li
                        class="hover:border-b-orange-300 hover:border-b-2 cursor-pointer"
                    >
                        Contact
                    </li>
                </ul>
            </nav>
        </div>
        <div id="sphere" class="sphere rounded-[50%] absolute sphere-initial">
        </div>
        <h1
            class="glitch absolute text-[6rem] md:text-[8rem] text-black bottom-[50vh] right-[50vw] translate-x-1/2 translate-y-1/2 font-extrabold"
        >
            <span class="absolute top-0 left-0" aria-hidden="true">SCROLL</span>
            SCROLL
            <span class="absolute top-0 left-0" aria-hidden="true">SCROLL</span>
        </h1>
        <section id="about" class="about absolute translate-x-[200vw]">
            <PageCard>
                <div class="card-intro" slot="front-card">ABOUT</div>
                <SimpleIntro slot="back-card" />
            </PageCard>
        </section>
        <section id="projects" class="projects absolute translate-x-[200vw]">
            <PageCard>
                <div class="card-intro" slot="front-card">PROJECTS</div>
                <SimpleProjects slot="back-card" />
            </PageCard>
        </section>
        <section id="contact" class="projects absolute translate-x-[200vw]">
            <PageCard>
                <div class="card-intro" slot="front-card">Contact</div>
                <SimpleContact slot="back-card" />
            </PageCard>
        </section>
    </main>
</Layout>

<style is:global>
    h2.page-title {
        text-transform: uppercase;
        font-weight: 500;
        font-size: 3.125rem;
        mix-blend-mode: difference;
    }
</style>

<style define:vars={{ sphereDim: sphereDim, sphereDimPx: sphereDimPx }}>
    .sphere-about {
        transform: translateY(calc(45vh - var(--sphereDimPx) / 2));
        margin-left: 50px;
    }

    .sphere-projects {
        transform: translateY(2.5rem)
            translateX(calc(50vw - var(--sphereDimPx) / 2 - 90px))
            rotate(425deg);
    }

    .sphere-contact {
        transform: translateY(calc(50vh - var(--sphereDimPx) / 2 + 20px))
            translateX(calc(100vw - var(--sphereDimPx) / 2 - 110px))
            rotate(950deg);
    }

    .sphere-initial {
        transform: translate(
                calc(50vw - var(--sphereDimPx) / 2),
                calc(50vh - var(--sphereDimPx) / 2)
            )
            scale(
                calc(
                    max(var(--screenHeight), var(--screenWidth)) /
                        (var(--sphereDim))
                )
            )
            rotate(960deg);
    }

    .sphere {
        width: var(--sphereDimPx);
        height: var(--sphereDimPx);
        background: rgb(231, 234, 231);
        border-radius: 50%;
        animation-fill-mode: forwards;
        transition: all 1s;
        position: relative;
    }

    .sphere::after {
        content: "";
        height: var(--sphereDimPx);
        width: 10px;
        background-color: black;
        display: block;
        transform: rotate(45deg);
        position: absolute;
        top: -25px;
        left: 30px;
    }

    .sphere::before {
        content: "";
        height: calc(var(--sphereDimPx) + 20px);
        width: 10px;
        background-color: black;
        display: block;
        transform: rotate(110deg);
        position: absolute;
        top: 40px;
        left: 35px;
    }
</style>

<style>
    @keyframes glitch {
        0% {
            text-shadow: 0.05em 0 0 rgba(255, 0, 0, 0.75),
                -0.05em -0.025em 0 rgba(0, 255, 0, 0.75),
                -0.025em 0.05em 0 rgba(0, 0, 255, 0.75);
        }
        14% {
            text-shadow: 0.05em 0 0 rgba(255, 0, 0, 0.75),
                -0.05em -0.025em 0 rgba(0, 255, 0, 0.75),
                -0.025em 0.05em 0 rgba(0, 0, 255, 0.75);
        }
        15% {
            text-shadow: -0.05em -0.025em 0 rgba(255, 0, 0, 0.75),
                0.025em 0.025em 0 rgba(0, 255, 0, 0.75),
                -0.05em -0.05em 0 rgba(0, 0, 255, 0.75);
        }
        49% {
            text-shadow: -0.05em -0.025em 0 rgba(255, 0, 0, 0.75),
                0.025em 0.025em 0 rgba(0, 255, 0, 0.75),
                -0.05em -0.05em 0 rgba(0, 0, 255, 0.75);
        }
        50% {
            text-shadow: 0.025em 0.05em 0 rgba(255, 0, 0, 0.75),
                0.05em 0 0 rgba(0, 255, 0, 0.75),
                0 -0.05em 0 rgba(0, 0, 255, 0.75);
        }
        99% {
            text-shadow: 0.025em 0.05em 0 rgba(255, 0, 0, 0.75),
                0.05em 0 0 rgba(0, 255, 0, 0.75),
                0 -0.05em 0 rgba(0, 0, 255, 0.75);
        }
        100% {
            text-shadow: -0.025em 0 0 rgba(255, 0, 0, 0.75),
                -0.025em -0.025em 0 rgba(0, 255, 0, 0.75),
                -0.025em -0.05em 0 rgba(0, 0, 255, 0.75);
        }
    }
    @keyframes enterin {
        from {
            transform: translate(200vw, 0);
        }
        to {
            transform: translate(0, 0);
        }
    }

    @keyframes exitout {
        0% {
            transform: translate(0, 0);
        }

        100% {
            transform: translate(-120vw, 0);
        }
    }
    .glitch {
        text-shadow: 0.05em 0 0 rgba(255, 0, 0, 0.75),
            -0.025em -0.05em 0 rgba(0, 255, 0, 0.75),
            0.025em 0.05em 0 rgba(0, 0, 255, 0.75);
        animation: glitch 500ms infinite;
        transition: all 0.5s;
    }

    .glitch span:first-child {
        animation: glitch 650ms infinite;
        clip-path: polygon(0 0, 100% 0, 100% 45%, 0 45%);
        transform: translate(-0.025em, -0.0125em);
        opacity: 0.8;
    }

    .glitch span:last-child {
        animation: glitch 375ms infinite;
        clip-path: polygon(0 80%, 100% 20%, 100% 100%, 0 100%);
        transform: translate(0.0125em, 0.025em);
        opacity: 0.8;
    }

    .enter-in {
        animation: enterin 1s;
        animation-fill-mode: forwards;
    }
    .exit-out {
        animation: exitout 1s;
        animation-fill-mode: forwards;
    }
    main {
        background: rgb(0, 0, 0);
        position: relative;
    }

    section {
        height: 100%;
        width: 100%;
        animation-fill-mode: forwards;
    }
</style>

<script>
    const sphereIdEl = document.getElementById("sphere");
    const pages: Array<{ name: string; element: HTMLElement }> = [
        { name: "about", element: document.getElementById("about")! },
        { name: "projects", element: document.getElementById("projects")! },
        { name: "contact", element: document.getElementById("contact")! },
    ];

    let currentPageIndex = 0;
    const incrementCurrentPageIndex = () => {
        let val = (currentPageIndex + 1) % pages.length;
        currentPageIndex = val;
        return val;
    };

    const decrementCurrentPageIndex = () => {
        if (currentPageIndex <= 0) {
            currentPageIndex = 2;
        } else {
            currentPageIndex--;
        }
        return currentPageIndex;
    };
    const mainElement = document.querySelector("main");

    let timerTimeout: any;
    let switchy = true;
    let performLogic = true;
    let abslastDeltaXY = 0;

    let mainHeaderOver = false;
    const handleElementToShow = (
        pagesArr: typeof pages,
        newPageToShow: (typeof pages)[0],
        oldPage: (typeof pages)[0]
    ) => {
        const oldPageRef = document.getElementById(oldPage.name);
        const newPageRef = document.getElementById(newPageToShow.name)!;
        oldPageRef!.classList.remove("enter-in");
        oldPageRef!.classList.add("exit-out");
        oldPageRef!.style.mixBlendMode = "difference";

        newPageRef!.classList.remove("exit-out");
        newPageRef!.classList.add("enter-in");
        newPageRef!.style.mixBlendMode = "difference";

        const classToRemove = `sphere-${oldPage.name}`;
        const classToAdd = `sphere-${newPageToShow.name}`;

        sphereIdEl!.classList.remove(classToRemove);
        sphereIdEl!.classList.add(classToAdd);
    };

    const transitionToNextSection = (
        direction: number,
        currentPageIndex: number,
        pagesArr: typeof pages
    ) => {
        const oldPageIndex = currentPageIndex;
        let newPageIndex;
        if (direction > 0) {
            newPageIndex = incrementCurrentPageIndex();
            console.log("forwards", newPageIndex);
        } else {
            newPageIndex = decrementCurrentPageIndex();
            console.log("backawrds", newPageIndex);
        }

        const newPageToShow = pagesArr[newPageIndex];
        const oldPage = pagesArr[oldPageIndex];

        handleElementToShow(pagesArr, newPageToShow, oldPage);
    };

    mainElement!.addEventListener("wheel", (ev) => {
        ev.preventDefault(); // stop scrolling
        const absEvVal = Math.abs(ev.deltaY + ev.deltaX);
        if (mainHeaderOver) {
            if (absEvVal > 75) {
                if (absEvVal > abslastDeltaXY) {
                    switchy = true;
                } else if (absEvVal < abslastDeltaXY && switchy) {
                    clearTimeout(timerTimeout);
                    if (performLogic) {
                        console.log("run");
                        transitionToNextSection(
                            ev.deltaY + ev.deltaX,
                            currentPageIndex,
                            pages
                        );
                        performLogic = false;
                    }

                    timerTimeout = setTimeout(() => {
                        switchy = false;
                        performLogic = true;
                    }, 200);
                }
                abslastDeltaXY = Math.abs(ev.deltaY + ev.deltaX);
            }
        } else {
            sphereIdEl!.classList.remove("sphere-initial");
            sphereIdEl!.classList.add("sphere-about");
            document.getElementById("about")!.classList.add("enter-in");
            document.getElementById("about")!.style.mixBlendMode = "difference";
            const glitchTextEl = document.querySelector(
                "h1.glitch"
            )! as HTMLElement;

            glitchTextEl.style.opacity = "0";
            setTimeout(() => {
                mainHeaderOver = true;
                glitchTextEl.classList.remove("glitch");
                glitchTextEl.style.opacity = "1";
            }, 1500);
        }
    });
</script>
