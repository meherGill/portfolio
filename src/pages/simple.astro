---
import Layout from "../layouts/LayoutSimple.astro";
import SimpleIntro from "../components/simplePageComponents/SimpleIntro.astro";
import SimpleProjects from "../components/simplePageComponents/SimpleProjects.astro";
import SimpleContact from "../components/simplePageComponents/SimpleContact.astro";
import GlitchText from "../components/Glitch/GlitchText.astro";
import CutCard from "../components/Card/CutCard/CutCard.astro";
import "../styles/base.css";
export interface Props {
    sphereDim: string;
}

const sphereDim = 150;
const sphereDimPx = `${sphereDim}px`;
---

<Layout title="simple portfolio">
    <main class="relative text-stone-200 overflow-hidden h-screen w-screen">
        <div class="fixed flex items-center justify-center w-screen z-[9999]">
            <nav
                class="flex items-center w-screen justify-end m-auto mt-5 lg:mx-14 mx-2 contained"
            >
                <button class="btn btn-primary cursor-pointer" id="preview-cv"
                    >Preview CV</button
                >
            </nav>
        </div>

        <div
            class="sphere sphereStyle rounded-[50%] absolute sphere-initial z-10 mix-blend-difference"
            id="sphere-main"
        >
        </div>
        <div
            class="sphere sphereStyle rounded-[50%] absolute sphere-initial z-10 mix-blend-difference"
            id="sphere-clone-A"
        >
        </div>
        <div
            class="sphere sphereStyle rounded-[50%] absolute sphere-initial z-10 mix-blend-difference"
            id="sphere-clone-B"
        >
        </div>

        <GlitchText
            id="main-glitch-text"
            textToShow={"SCROLL"}
            class="z-20 absolute text-[4rem] md:text-[8rem] text-black bottom-[50vh] right-[50vw] translate-x-1/2 translate-y-1/2 font-extrabold"
        />

        <CutCard class="about z-[100] out bg-black" id="aboutCard">
            <SimpleIntro slot="main" />
            <SimpleIntro slot="copy" />
        </CutCard>

        <CutCard
            id="projectsCard"
            class="projects absolute z-[90] out bg-slate-900"
        >
            <SimpleProjects id="projects-main" slot="main" />
            <SimpleProjects id="projects-copy" slot="copy" />
        </CutCard>

        <CutCard
            id="contactCard"
            class="projects absolute z-[80] out bg-stone-900"
        >
            <SimpleContact slot="main" />
            <SimpleContact slot="copy" />
        </CutCard>
    </main>
</Layout>

<style is:global>
    h2.page-title,
    h1.page-title {
        text-transform: uppercase;
        font-weight: 500;
        font-size: 3.125rem;

        @media screen and (max-width: 400px) {
            font-size: 2rem;
        }
    }
</style>

<style define:vars={{ sphereDim: sphereDim, sphereDimPx: sphereDimPx }}>
    .sphere-aboutCard {
        transform: translateY(calc(45vh - var(--sphereDimPx) / 2));
        margin-left: 50px;
    }

    .sphere-projectsCard {
        transform: translateY(2.5rem)
            translateX(calc(50vw - var(--sphereDimPx) / 2 - 90px))
            rotate(425deg);
    }

    .sphere-contactCard {
        transform: translateY(calc(100vh - var(--sphereDimPx)))
            translateX(calc(100vw - var(--sphereDimPx) / 2 - 110px))
            rotate(950deg);
    }

    .sphere-initial {
        transform: translate(
                calc(50vw - var(--sphereDimPx) / 2),
                calc(50vh - var(--sphereDimPx) / 2)
            )
            scale(
                calc(
                    max(var(--screenHeight), var(--screenWidth)) /
                        (var(--sphereDim))
                )
            )
            rotate(960deg);
    }

    .sphereStyle {
        width: var(--sphereDimPx);
        height: var(--sphereDimPx);

        @media screen and (max-width: 400px) {
            width: 100px;
            height: 100px;
        }
        background: rgb(231, 234, 231);
        border-radius: 50%;
        animation-fill-mode: forwards;
        transition: transform 1s;
    }

    .sphereStyle::after {
        content: "";
        height: var(--sphereDimPx);
        width: 10px;
        background-color: black;
        display: block;
        transform: rotate(45deg);
        position: absolute;
        top: -25px;
        left: 30px;
    }

    .sphereStyle::before {
        content: "";
        height: calc(var(--sphereDimPx) + 20px);
        width: 10px;
        background-color: black;
        display: block;
        transform: rotate(110deg);
        position: absolute;
        top: 40px;
        left: 35px;
        z-index: 10;
    }
</style>

<style>
    @keyframes enterin {
        from {
            transform: translate(200vw, 0);
        }
        to {
            transform: translate(0, 0);
        }
    }

    @keyframes exitout {
        0% {
            transform: translate(0, 0);
        }

        100% {
            transform: translate(-120vw, 0);
        }
    }

    @keyframes glitchSphereKeyframe {
        0% {
            box-shadow: inset 2.5px 0px 0px 0px rgb(234, 199, 25),
                inset 2.5px -1.5px 0px 0px rgb(210, 25, 195),
                inset -5px 2.5px 0px 0px rgb(32, 42, 185);
        }
        14% {
            box-shadow: inset -3px 2.5px 0px 0px rgb(234, 199, 25),
                inset 1.5px -5px 0px 0px rgb(210, 25, 195),
                inset 2.5px -5px 0px 0px rgb(32, 42, 185);
        }
        20% {
            box-shadow: inset 1.5px -5px 0px 0px rgb(234, 199, 25),
                inset 1.5px -7.5px 0px 0px rgb(210, 25, 195),
                inset -3px 2.5px 0px 0px rgb(32, 42, 185);
        }
        40% {
            box-shadow: inset -7.5px 1.5px 0px 0px rgb(234, 199, 25),
                inset 2.5px -5px 0px 0px rgb(210, 25, 195),
                inset 3px -2.5px 0px 0px rgb(32, 42, 185);
        }
        49% {
            box-shadow: inset 2.5px 0px 0px 0px rgb(234, 199, 25),
                inset 2.5px -5px 0px 0px rgb(210, 25, 195),
                inset -5px 2.5px 0px 0px rgb(32, 42, 185);
        }
        50% {
            box-shadow: inset -2.5px 0px 0px 0px rgb(234, 199, 25),
                inset -2.5px 5px 0px 0px rgb(210, 25, 195),
                inset 5px -7.5px 0px 0px rgb(32, 42, 185);
        }
        100% {
            box-shadow: none;
        }
    }

    .enter-in {
        animation: enterin 1s;
        animation-fill-mode: forwards;
    }
    .exit-out {
        animation: exitout 1s;
        animation-fill-mode: forwards;
    }
    main {
        background: rgb(0, 0, 0);
        position: relative;
    }

    section {
        height: 100%;
        width: 100%;
        animation-fill-mode: forwards;
    }

    .page-card {
        height: 100%;
        width: 100%;
        border-radius: 50px;
    }

    .card-intro {
        height: full;
        width: full;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: rgba(254, 254, 254, 0.8);
    }

    .page-card {
        transition: translate 1s, scale 1s cubic-bezier(1, -0.01, 1, 0.07);
    }

    .page-card-mini {
        scale: 0.1;
    }

    .page-card-big {
        scale: 1;
    }

    .out {
        transform: translateX(200vw);
    }

    #sphere-main {
        /* clip-path: polygon(0 59%, 100% 30%, 100% 0, 100% 60%); */
        clip-path: polygon(0 0, 100% 0, 100% 34%, 0 53%);
        animation: glitchSphereKeyframe 500ms infinite;
        translate: -2px;
    }

    .sphere-main-transit {
        translate: 0px 10px;
    }

    .sphere-clone-C-transit {
        translate: 0px -10px;
    }
    #sphere-clone-A {
        clip-path: polygon(100% 75%, 100% 34%, 0 53%);
        animation: glitchSphereKeyframe 300ms infinite;
        translate: 2px;
    }

    #sphere-clone-B {
        clip-path: polygon(100% 75%, 100% 100%, 0% 100%, 0 53%);
        animation: glitchSphereKeyframe 800ms infinite;
        translate: 5px;
    }
</style>

<script>
    document.getElementById("git-btn")?.addEventListener("click", () => {
        window.open("https://github.com/meherGill", "_blank");
    });

    document.getElementById("preview-cv")?.addEventListener("click", () => {
        window.open("/resume/Resume.pdf", "_blank");
    });

    const sphereElements = document.querySelectorAll(
        ".sphere"
    ) as NodeListOf<HTMLElement>;

    const pages: Array<{ name: string }> = [
        { name: "aboutCard" },
        {
            name: "projectsCard",
        },
        {
            name: "contactCard",
        },
    ];

    let currentPageIndex = 0;
    const incrementCurrentPageIndex = () => {
        let val = (currentPageIndex + 1) % pages.length;
        currentPageIndex = val;
        return val;
    };

    const decrementCurrentPageIndex = () => {
        if (currentPageIndex <= 0) {
            currentPageIndex = 2;
        } else {
            currentPageIndex--;
        }
        return currentPageIndex;
    };
    const mainElement = document.querySelector("main");

    let timerTimeout: any;
    let switchy = true;
    let performLogic = true;
    let abslastDeltaXY = 0;

    let mainHeaderOver = false;
    let wheelEnabled = true;
    const handleElementToShow = (
        newPageToShow: (typeof pages)[0],
        oldPage: (typeof pages)[0],
        newPageIndex: number,
        oldPageIndex: number,
        pagesArr: Array<{ name: string }>
    ) => {
        let newPageCardRef;
        let newPageCardRefCopy;
        let oldPageCardRef;
        let oldPageCardRefCopy;
        for (let i = 0; i < pagesArr.length; i++) {
            if (i === newPageIndex) {
                newPageCardRef = document.getElementById(
                    `${newPageToShow.name}`
                )!;
                newPageCardRefCopy = document.getElementById(
                    `${newPageToShow.name}-copy`
                )!;
                newPageCardRef.style.zIndex = "90";
                newPageCardRefCopy.style.zIndex = "90";
            } else if (i === oldPageIndex) {
                oldPageCardRef = document.getElementById(`${oldPage.name}`)!;
                oldPageCardRefCopy = document.getElementById(
                    `${oldPage.name}-copy`
                )!;
                oldPageCardRef!.style.zIndex = "100";
                oldPageCardRefCopy!.style.zIndex = "100";
            } else {
                document.getElementById(pagesArr[i].name)!.style.zIndex = "80";
                document.getElementById(
                    `${pagesArr[i].name}-copy`
                )!.style.zIndex = "80";
            }
        }

        newPageCardRef!.classList.remove("leave");
        newPageCardRefCopy!.classList.remove("leave");
        oldPageCardRef!.classList.add("leave");
        oldPageCardRefCopy!.classList.add("leave");
        setTimeout(() => {
            newPageCardRef!.style.zIndex = 100;
            newPageCardRefCopy!.style.zIndex = 100;
            oldPageCardRef!.style.zIndex = 90;
            oldPageCardRefCopy!.style.zIndex = 90;
        }, 100);
        const classToRemove = `sphere-${oldPage.name}`;
        const classToAdd = `sphere-${newPageToShow.name}`;

        sphereElements.forEach((element) => {
            element!.classList.remove(classToRemove);
            element!.classList.add(classToAdd);
        });
    };

    const transitionToNextSection = (
        direction: number,
        currentPageIndex: number,
        pagesArr: typeof pages
    ) => {
        const oldPageIndex = currentPageIndex;
        let newPageIndex;
        if (direction > 0) {
            newPageIndex = incrementCurrentPageIndex();
        } else {
            newPageIndex = decrementCurrentPageIndex();
        }

        const newPageToShow = pagesArr[newPageIndex];
        const oldPage = pagesArr[oldPageIndex];

        handleElementToShow(
            newPageToShow,
            oldPage,
            newPageIndex,
            oldPageIndex,
            pagesArr
        );
    };

    const ifNotMainHeaderOver = () => {
        sphereElements.forEach((element) => {
            element!.classList.remove("sphere-initial", "z-10");
            element!.classList.add("sphere-aboutCard", "z-[999]");
        });

        const allOutElements = document.querySelectorAll(".out");
        allOutElements!.forEach((el) => {
            el.classList.remove("out");
        });

        //remove glitch effect in 1.5s
        setTimeout(() => {
            mainHeaderOver = true;

            document
                .getElementById("main-glitch-text")!
                .classList.add("notVisible");
        }, 1500);
    };

    let touchMove = false;
    let changedTouchStart: any = [];
    window!.addEventListener("touchmove", (ev) => {
        touchMove = true;
        changedTouchStart = ev.changedTouches;
    });

    window!.addEventListener("touchstart", (ev) => {
        touchMove = false;
    });

    window!.addEventListener("touchend", (ev) => {
        if (touchMove && mainHeaderOver) {
            transitionToNextSection(1, currentPageIndex, pages);
        } else {
            ifNotMainHeaderOver();
        }
    });
    mainElement!.addEventListener("wheel", (ev) => {
        ev.preventDefault();
        const absEvVal = Math.abs(ev.deltaY + ev.deltaX);
        if (mainHeaderOver && wheelEnabled) {
            if (absEvVal > 75) {
                if (absEvVal > abslastDeltaXY) {
                    switchy = true;
                } else if (absEvVal < abslastDeltaXY && switchy) {
                    clearTimeout(timerTimeout);
                    if (performLogic) {
                        transitionToNextSection(
                            ev.deltaY + ev.deltaX,
                            currentPageIndex,
                            pages
                        );
                        performLogic = false;
                    }

                    timerTimeout = setTimeout(() => {
                        switchy = false;
                        performLogic = true;
                    }, 200);
                }
                abslastDeltaXY = Math.abs(ev.deltaY + ev.deltaX);
            }
        } else {
            ifNotMainHeaderOver();
        }
    });
</script>
